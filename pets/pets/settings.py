"""
Django settings for pets project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import json
from pathlib import Path

from dotenv import load_dotenv

from .sensitive import manage_sensitive

load_dotenv(verbose=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = manage_sensitive('SECRET_KEY') or os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1')

# Storage settings
USE_S3_STORAGE = os.getenv('USE_S3_STORAGE', 'False').lower() in ('true', '1', 't')

STATIC_FILES_FOLDER_NAME = 'staticfiles'

MEDIA_FILES_FOLDER_NAME = 'mediafiles'

STATIC_URL = f'/{STATIC_FILES_FOLDER_NAME}/'

MEDIA_URL = f'/{MEDIA_FILES_FOLDER_NAME}/'

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

STATIC_ROOT = BASE_DIR / STATIC_FILES_FOLDER_NAME

MEDIA_ROOT = BASE_DIR / MEDIA_FILES_FOLDER_NAME

if USE_S3_STORAGE:
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')

    AWS_SECRET_ACCESS_KEY = manage_sensitive('AWS_SECRET_ACCESS_KEY') or os.getenv('AWS_SECRET_ACCESS_KEY')

    AWS_STORAGE_BUCKET_NAME = 'pets'

    AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')

    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

    AWS_DEFAULT_ACL = 'public-read'

    AWS_S3_SIGNATURE_VERSION = 's3v4'

    STATIC_URL = f'https://{AWS_S3_ENDPOINT_URL}/{STATIC_FILES_FOLDER_NAME}/'

    MEDIA_URL = f'https://{AWS_S3_ENDPOINT_URL}/{MEDIA_FILES_FOLDER_NAME}/'

    STATICFILES_STORAGE = 'custom_storages.StaticStorage'

    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'

try:
    ALLOWED_HOSTS = json.loads(os.getenv('ALLOWED_HOSTS'))
except json.JSONDecodeError:
    ALLOWED_HOSTS = []
API_KEY = manage_sensitive('API_KEY') or os.getenv('API_KEY')

API_KEY_CUSTOM_HEADER = 'HTTP_X_API_KEY'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
}
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_api_key',
    'storages',
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'api.permissions.ApiKeyHeaderMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pets.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pets.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('APP_DB_ENGINE', 'django.db.sqlite3'),
        'NAME': os.getenv('DB_NAME', 'db.sqlite'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': manage_sensitive('DB_PASSWORD') or os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', None),
        'PORT': os.getenv('DB_PORT', None)
    },
}
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
